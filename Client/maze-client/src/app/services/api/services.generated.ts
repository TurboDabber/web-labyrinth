//----------------------
// <auto-generated>
//     Generated using the NSwag toolchain v14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0)) (http://NSwag.org)
// </auto-generated>
//----------------------

/* tslint:disable */
/* eslint-disable */
// ReSharper disable InconsistentNaming

export class ApiClient {
    private http: { fetch(url: RequestInfo, init?: RequestInit): Promise<Response> };
    private baseUrl: string;
    protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;

    constructor(baseUrl?: string, http?: { fetch(url: RequestInfo, init?: RequestInit): Promise<Response> }) {
        this.http = http ? http : window as any;
        this.baseUrl = baseUrl ?? "";
    }

    /**
     * @param body (optional) 
     * @return OK
     */
    mazesPOST(body: GenerateMazeCommand | undefined): Promise<number> {
        let url_ = this.baseUrl + "/api/maze/mazes";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_: RequestInit = {
            body: content_,
            method: "POST",
            headers: {
                "Content-Type": "application/json",
                "Accept": "text/plain"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processMazesPOST(_response);
        });
    }

    protected processMazesPOST(response: Response): Promise<number> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
                result200 = resultData200 !== undefined ? resultData200 : <any>null;
    
            return result200;
            });
        } else if (status === 400) {
            return response.text().then((_responseText) => {
            let result400: any = null;
            let resultData400 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
                result400 = resultData400 !== undefined ? resultData400 : <any>null;
    
            return throwException("Bad Request", status, _responseText, _headers, result400);
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<number>(null as any);
    }

    /**
     * @param command (optional) 
     * @return OK
     */
    mazesAll(command: GetAllMazes | undefined): Promise<Maze[]> {
        let url_ = this.baseUrl + "/api/maze/mazes?";
        if (command === null)
            throw new Error("The parameter 'command' cannot be null.");
        else if (command !== undefined)
            url_ += "command=" + encodeURIComponent("" + command) + "&";
        url_ = url_.replace(/[?&]$/, "");

        let options_: RequestInit = {
            method: "GET",
            headers: {
                "Accept": "text/plain"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processMazesAll(_response);
        });
    }

    protected processMazesAll(response: Response): Promise<Maze[]> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            if (Array.isArray(resultData200)) {
                result200 = [] as any;
                for (let item of resultData200)
                    result200!.push(Maze.fromJS(item));
            }
            else {
                result200 = <any>null;
            }
            return result200;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<Maze[]>(null as any);
    }

    /**
     * @return OK
     */
    mazesGET(id: number): Promise<Maze> {
        let url_ = this.baseUrl + "/api/maze/mazes/{id}";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id));
        url_ = url_.replace(/[?&]$/, "");

        let options_: RequestInit = {
            method: "GET",
            headers: {
                "Accept": "text/plain"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processMazesGET(_response);
        });
    }

    protected processMazesGET(response: Response): Promise<Maze> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = Maze.fromJS(resultData200);
            return result200;
            });
        } else if (status === 404) {
            return response.text().then((_responseText) => {
            let result404: any = null;
            let resultData404 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result404 = ProblemDetails.fromJS(resultData404);
            return throwException("Not Found", status, _responseText, _headers, result404);
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<Maze>(null as any);
    }

    /**
     * @param startX (optional) 
     * @param startY (optional) 
     * @param endX (optional) 
     * @param endY (optional) 
     * @return OK
     */
    path(id: number, startX: number | undefined, startY: number | undefined, endX: number | undefined, endY: number | undefined): Promise<MazePathResponse> {
        let url_ = this.baseUrl + "/api/maze/mazes/{id}/path?";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id));
        if (startX === null)
            throw new Error("The parameter 'startX' cannot be null.");
        else if (startX !== undefined)
            url_ += "startX=" + encodeURIComponent("" + startX) + "&";
        if (startY === null)
            throw new Error("The parameter 'startY' cannot be null.");
        else if (startY !== undefined)
            url_ += "startY=" + encodeURIComponent("" + startY) + "&";
        if (endX === null)
            throw new Error("The parameter 'endX' cannot be null.");
        else if (endX !== undefined)
            url_ += "endX=" + encodeURIComponent("" + endX) + "&";
        if (endY === null)
            throw new Error("The parameter 'endY' cannot be null.");
        else if (endY !== undefined)
            url_ += "endY=" + encodeURIComponent("" + endY) + "&";
        url_ = url_.replace(/[?&]$/, "");

        let options_: RequestInit = {
            method: "GET",
            headers: {
                "Accept": "text/plain"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processPath(_response);
        });
    }

    protected processPath(response: Response): Promise<MazePathResponse> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = MazePathResponse.fromJS(resultData200);
            return result200;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<MazePathResponse>(null as any);
    }
}

export class GenerateMazeCommand implements IGenerateMazeCommand {
    width?: number;
    height?: number;

    constructor(data?: IGenerateMazeCommand) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.width = _data["width"] !== undefined ? _data["width"] : <any>null;
            this.height = _data["height"] !== undefined ? _data["height"] : <any>null;
        }
    }

    static fromJS(data: any): GenerateMazeCommand {
        data = typeof data === 'object' ? data : {};
        let result = new GenerateMazeCommand();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["width"] = this.width !== undefined ? this.width : <any>null;
        data["height"] = this.height !== undefined ? this.height : <any>null;
        return data;
    }
}

export interface IGenerateMazeCommand {
    width?: number;
    height?: number;
}

export class GetAllMazes implements IGetAllMazes {

    constructor(data?: IGetAllMazes) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
    }

    static fromJS(data: any): GetAllMazes {
        data = typeof data === 'object' ? data : {};
        let result = new GetAllMazes();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        return data;
    }
}

export interface IGetAllMazes {
}

export class Maze implements IMaze {
    id?: number;
    width!: number;
    height!: number;
    mazeDataJson!: string;
    mazeData?: number[][];
    algorithmType!: MazeAlgorithmType;

    constructor(data?: IMaze) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"] !== undefined ? _data["id"] : <any>null;
            this.width = _data["width"] !== undefined ? _data["width"] : <any>null;
            this.height = _data["height"] !== undefined ? _data["height"] : <any>null;
            this.mazeDataJson = _data["mazeDataJson"] !== undefined ? _data["mazeDataJson"] : <any>null;
            if (Array.isArray(_data["mazeData"])) {
                this.mazeData = [] as any;
                for (let item of _data["mazeData"])
                    this.mazeData!.push(item);
            }
            else {
                this.mazeData = <any>null;
            }
            this.algorithmType = _data["algorithmType"] !== undefined ? _data["algorithmType"] : <any>null;
        }
    }

    static fromJS(data: any): Maze {
        data = typeof data === 'object' ? data : {};
        let result = new Maze();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id !== undefined ? this.id : <any>null;
        data["width"] = this.width !== undefined ? this.width : <any>null;
        data["height"] = this.height !== undefined ? this.height : <any>null;
        data["mazeDataJson"] = this.mazeDataJson !== undefined ? this.mazeDataJson : <any>null;
        if (Array.isArray(this.mazeData)) {
            data["mazeData"] = [];
            for (let item of this.mazeData)
                data["mazeData"].push(item);
        }
        data["algorithmType"] = this.algorithmType !== undefined ? this.algorithmType : <any>null;
        return data;
    }
}

export interface IMaze {
    id?: number;
    width: number;
    height: number;
    mazeDataJson: string;
    mazeData?: number[][];
    algorithmType: MazeAlgorithmType;
}

export enum MazeAlgorithmType {
    _0 = 0,
}

export class MazePathResponse implements IMazePathResponse {
    path?: Point2D[];

    constructor(data?: IMazePathResponse) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
            if (data.path) {
                this.path = [];
                for (let i = 0; i < data.path.length; i++) {
                    let item = data.path[i];
                    this.path[i] = item && !(<any>item).toJSON ? new Point2D(item) : <Point2D>item;
                }
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            if (Array.isArray(_data["path"])) {
                this.path = [] as any;
                for (let item of _data["path"])
                    this.path!.push(Point2D.fromJS(item));
            }
            else {
                this.path = <any>null;
            }
        }
    }

    static fromJS(data: any): MazePathResponse {
        data = typeof data === 'object' ? data : {};
        let result = new MazePathResponse();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        if (Array.isArray(this.path)) {
            data["path"] = [];
            for (let item of this.path)
                data["path"].push(item.toJSON());
        }
        return data;
    }
}

export interface IMazePathResponse {
    path?: IPoint2D[];
}

export class Point2D implements IPoint2D {
    x?: number;
    y?: number;

    constructor(data?: IPoint2D) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.x = _data["x"] !== undefined ? _data["x"] : <any>null;
            this.y = _data["y"] !== undefined ? _data["y"] : <any>null;
        }
    }

    static fromJS(data: any): Point2D {
        data = typeof data === 'object' ? data : {};
        let result = new Point2D();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["x"] = this.x !== undefined ? this.x : <any>null;
        data["y"] = this.y !== undefined ? this.y : <any>null;
        return data;
    }
}

export interface IPoint2D {
    x?: number;
    y?: number;
}

export class ProblemDetails implements IProblemDetails {
    type?: string | null;
    title?: string | null;
    status?: number | null;
    detail?: string | null;
    instance?: string | null;

    [key: string]: any;

    constructor(data?: IProblemDetails) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            for (var property in _data) {
                if (_data.hasOwnProperty(property))
                    this[property] = _data[property];
            }
            this.type = _data["type"] !== undefined ? _data["type"] : <any>null;
            this.title = _data["title"] !== undefined ? _data["title"] : <any>null;
            this.status = _data["status"] !== undefined ? _data["status"] : <any>null;
            this.detail = _data["detail"] !== undefined ? _data["detail"] : <any>null;
            this.instance = _data["instance"] !== undefined ? _data["instance"] : <any>null;
        }
    }

    static fromJS(data: any): ProblemDetails {
        data = typeof data === 'object' ? data : {};
        let result = new ProblemDetails();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        for (var property in this) {
            if (this.hasOwnProperty(property))
                data[property] = this[property];
        }
        data["type"] = this.type !== undefined ? this.type : <any>null;
        data["title"] = this.title !== undefined ? this.title : <any>null;
        data["status"] = this.status !== undefined ? this.status : <any>null;
        data["detail"] = this.detail !== undefined ? this.detail : <any>null;
        data["instance"] = this.instance !== undefined ? this.instance : <any>null;
        return data;
    }
}

export interface IProblemDetails {
    type?: string | null;
    title?: string | null;
    status?: number | null;
    detail?: string | null;
    instance?: string | null;

    [key: string]: any;
}

export class ApiException extends Error {
    message: string;
    status: number;
    response: string;
    headers: { [key: string]: any; };
    result: any;

    constructor(message: string, status: number, response: string, headers: { [key: string]: any; }, result: any) {
        super();

        this.message = message;
        this.status = status;
        this.response = response;
        this.headers = headers;
        this.result = result;
    }

    protected isApiException = true;

    static isApiException(obj: any): obj is ApiException {
        return obj.isApiException === true;
    }
}

function throwException(message: string, status: number, response: string, headers: { [key: string]: any; }, result?: any): any {
    if (result !== null && result !== undefined)
        throw result;
    else
        throw new ApiException(message, status, response, headers, null);
}